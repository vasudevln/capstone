version: 2.1

orbs:
  kubernetes: circleci/kubernetes@1.3.1

executors:
  docker-publisher:
    environment:
      IMAGE_TAG: vasudevla/hello-world
    docker:
      - image: docker:stable

jobs:
  lint:
    docker:
      - image: circleci/python:3.9-buster
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          - v1-dependencies-
      - run:
          name: Install Dependencies
          command: |
            sudo apt update
            sudo pip install --upgrade pip
            sudo pip install -r requirements.txt
            sudo pip install pylint
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 &&\
            sudo chmod +x /bin/hadolint
            python3 -m venv venv
            . venv/bin/activate
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: Lint files
          command: |
            . venv/bin/activate
            make lint
  
  build-image:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Image
          command: |
            docker build -t "${IMAGE_TAG}" .
            docker image ls
      - run:
          name: Save Docker image
          command: docker save --output image.tar "${IMAGE_TAG}"
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  push-image:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load Docker image
          command: docker load --input /tmp/workspace/image.tar
      - run:
          name: Push Image to Docker Hub
          command: |
             echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
             docker push "${IMAGE_TAG}"
  
  create-cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Create cluster and nodegroup
          command: |
             aws cloudformation deploy --template-file infra.yml --stack-name "capstone-cluster" --parameter-overrides file://infra-parameters.json  --tags project=capstone --capabilities CAPABILITY_NAMED_IAM
          no_output_timeout: 20m
  
  create-deployment-service:
     executor: aws-eks/python3
     steps:
        - checkout
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: CapstoneCluster
            install-kubectl: true
        - kubernetes/create-or-update-resource:
            get-rollout-status: true
            resource-file-path: deployment.yaml
            resource-name: helloworld-deployment
        - kubernetes/create-or-update-resource:
            resource-file-path: service.yaml
            resource-name: helloworld-service

workflows:
  build_and_deploy:
    jobs:
      - lint
      - build-image:
          requires: [lint]
      - push-image:
          requires: [build-image]
      # - create-cluster:
      #     requires: [push-image]
      - create-deployment-service:
          requires: [push-image]